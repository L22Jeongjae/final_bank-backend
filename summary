[ 126기 3. 스프링부트 JPA + 리액트 + JSP + ORACLE + 마이바티스 + 매퍼 ]

기존 => ProductDAOImpl.java에서 mapper 호출
수정 => ProductDAO.java에서 바로 mapper 호출

	- ProductMapper.java로 클래스명수정, @Mapper추가
    - ProductServiceImpl.java에서 @Autowired ProductMapper dao
    - product > productMapper.xml  => namespace 수정

    - ProductDAOImpl.java는 삭제
      


**************
실행시 버전 오류  **
**************
Exception in thread "main" java.lang.UnsupportedClassVersionError: 
org/springframework/boot/SpringApplication has been compiled by a more recent version of the Java Runtime 
(class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 52.0

=> pom.xm. 버전 수정(3.0.5 -> 2.7.4)
<parent> 
 <version>3.0.5</version> 	
</parent>

<parent> 
 <version>2.7.4</version>	
</parent>

=> java 버전(17-> 1.8)
<properties>
		<java.version>1.8</java.version>
	</properties>

//////////////////////////////////////////////

주의 :
[ 1. 프로젝트 생성 ]
[ 2. pom.xml ]
[ 3. application.properties ]  
[ 4. ProductDTO.java ]
[ 5. controller > ProductController 작성 - view페이지 : jsp(html 아니고) ]
[ 6. jsp 작성(현재 : src > main) ]

   경로 추가 : src/main 하위에 > webapp > WEB-INF > views > product > jsp 작성



//////////////////////////////////////////////
0. 테이블 생성

scott_126 계정에서 작업

DROP TABLE mvc_product_tbl CASCADE CONSTRAINTS;
CREATE TABLE mvc_product_tbl(
	id		number(5)    PRIMARY KEY,
	name    varchar2(50) NOT NULL,
	brand   varchar2(50) NOT NULL,
	madein  varchar2(50) NOT NULL,
	price   number(9)    NOT NULL
);

SELECT * FROM MVC_PRODUCT_TBL;

-----------------------------------------------------
[ 1-1. 프로젝트 생성 ]
New > Spring Starter Project 
> Name : springBoot_basic
 Type: Maven
 Java Version: 8
> Dependencies 추가
  SQL : JDBC API  
  SQL : Spirng Data JPA 
  SQL : Oracle Driver
  SQL : MyBatis Framework
  Web : Spring Web
  Template Engine : Thymeleaf  => 선택안함
  
> Finish   


[ 1-2. 플젝명 - 우클릭 > Properties > ] 
   Java Build Path : jre1.8.xx
   compiler : 1.8
   project Facets : 1.8
   
   
  버전 오류 해결 -> Problems 탭 > Errors  소스 우클릭 > Quick Fix 
   
   실행 => 메인메서드클래스 우클릭 > Run As > Run On Server > Spring Boot App 선택 > spring boot 로그 떠야함 
   
  크롬창에서 localhost:8081/product/ 직접 실행
  => 오류.. 매퍼, dao 작성안함
  
-----------------------------------------------------
[ 2. pom.xml - 버전 체크 ]   

    <parent>
    	<version>2.7.4</version>
    </parent>
	<properties>
		<java.version>1.8</java.version>
	</properties>
	
	
	<!-- 플젝 생성시 자동추가 : 주의사항 => jstl, tomcat 반드시 추가 -->
	
	<!-- jpa -->
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-data-jpa</artifactId>
	</dependency>
		
	<!-- 스프링 부트용 jdbc 라이브러리 -->
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-jdbc</artifactId>
	</dependency>
	
	<!-- 필수추가해야 함 (미추가시 @RequestMapping, ModelAndView를 인식못함)  -->
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-web</artifactId>
	</dependency>
	
	<!-- 마이바티스 -->
	<dependency>
		<groupId>org.mybatis.spring.boot</groupId>
		<artifactId>mybatis-spring-boot-starter</artifactId>
		<version>3.0.0</version>
	</dependency>

	<!-- 오라클 -->
	<dependency>
		<groupId>com.oracle.database.jdbc</groupId>
		<artifactId>ojdbc8</artifactId>
		<scope>runtime</scope>
	</dependency>
	
	<!-- 직접추가함 : 타임리프 대신 JSP사용, 2개  dependency 누락시 작동안됨 -->
	<!-- Servlet -->
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>jstl</artifactId>
		<version>1.2</version>
	</dependency>

	<!-- 톰캣 -->
    <dependency>
        <groupId>org.apache.tomcat.embed</groupId>
        <artifactId>tomcat-embed-jasper</artifactId>
    </dependency> 
	<!-- 타임리프 대신 JSP -->
	
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-test</artifactId>
		<scope>test</scope>
	</dependency>
</dependencies>

---------------------------------------------------

[ 3. application.properties ]

com.example.react -> 경로수정

jsp 경로 추가 > src > main > webapp > WEB-INF > views

mapper 생성 > mappers/**/*.xml

# db connection(oracle) - spring(context.xml)
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=scott_126
spring.datasource.password=tiger
spring.datasource.tomcat.initial-size=2
spring.datasource.hikari.maximum-pool-size=2
spring.datasource.hikari.connection-timeout=5000
spring.datasource.hikari.validation-timeout=2000
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.tomcat.timeBetweenEvictionRunsMillis=60000

# JPA SQL SHOW
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
spring.jpa.show-sql=true

# spring.jpa.hibernate.use-new-id-generator-mappings=false

# http port number(default 8080)
server.port=8081

# view resolver - servlet.context.xml
# thymeleaf.cache

# jsp - spring(servlet-context.xml)
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
server.jsp-servlet.init-parameters.development=true
# spring.devtools.livereload.enabled: true

# custom error page
server.error.whitelabel.enabled=false    

# MyBatis - spring(dataSource-config.xml)
mybatis.mapper-locations=mappers/**/*.xml
mybatis.type-aliases-package=com.example.react.dao

mybatis.configuration.map-underscore-to-camel-case=true

logging.level.com.atoz_develop.mybatissample.repository=TRACE




-----------------------------------------------------

4. MemberDTO.java

﻿// JPA가 추가되어야 @Entity, @Table @Id import 가능

package com.example.react.dto;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="mvc_member_tbl")
public class MemberDTO {
	
	private int id;
	private String password;
	private String username;
	private int age;
	private String email;
	private String address;
	private int salary;
	
	@Id
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public int getSalary() {
		return salary;
	}
	public void setSalary(int salary) {
		this.salary = salary;
	}
	
}


--------------------------------------------

[ 5. controller > ProductController 작성 - view페이지 : jsp(html 아니고) ]



-----------

[ 6. jsp 작성(현재 : src > main) ]

   경로 추가 : src/main 하위에 > webapp > WEB-INF > views > product > jsp 작성
   
  작성 안함 => react로 대체한다.


------------------------------------------------------

7. service > MemberService.java / MemberServiceImpl.java 

[ MemberService.java ]
public interface MemberService {
	
	public List<MemberDTO>listAll(HttpServletRequest req, Model model)
		throws ServletException,IOException;
	
	public void insertMember(MemberDTO dto)
			throws ServletException,IOException;
	
	public void updateMember(MemberDTO dto)
			throws ServletException,IOException;
	
	public void deleteMember(int id)
			throws ServletException,IOException;
	
	public MemberDTO selectMember(int id)
			throws ServletException,IOException;
}
-------------------
  [ MemberServiceImpl.java ]  
  수정사항 =>   
  @Autowired
  private MemberMapper dao;
  
-------------------  
package com.example.react.service;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;

import com.example.react.dao.MemberMapper;
import com.example.react.dto.MemberDTO;

@Service
public class MemberServiceImpl implements MemberService{

	@Autowired
	private MemberMapper dao;
	
	@Override
	public List<MemberDTO> listAll(HttpServletRequest req, Model model) 
			throws ServletException, IOException {
		System.out.println("서비스 - listAll()");
		List<MemberDTO> list;
		list = dao.memberList();
		
		return list;
	}

	@Override
	public void insertMember(MemberDTO dto) 
			throws ServletException, IOException {
		dao.insertMember(dto);
	}

	@Override
	public void updateMember(MemberDTO dto) 
			throws ServletException, IOException {
		dao.updateMember(dto);
	}

	@Override
	public void deleteMember(int id) 
			throws ServletException, IOException {
		dao.deleteMember(id);
	}

	@Override
	public MemberDTO selectMember(int id) 
			throws ServletException, IOException {
		MemberDTO dto = dao.findById(id);
		return dto;
	}

}


--------------------------------------------------

8. [ MemberMapper.java ]

package com.example.springBoot_basic.dao;

import java.util.List;

import org.apache.ibatis.annotations.Mapper;

import com.example.springBoot_basic.dto.ProductDTO;

@Mapper
public interface MemberMapper {

	public List<MemberDTO> memberList();
	
	public void insertMember(MemberDTO dto);
	
	public void updateMember(MemberDTO dto);
	
	public void deleteMember(int id);
	
	public MemberDTO findById(int id);
}


--------

--------------------------------------------  
    
9. mappers > react_memberMapper.xml  => namespace 수정

<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
     
    <!-- namespace="패키지명.인터페이스" -->
<mapper namespace="com.example.react.dao.MemberMapper">

	<select id="memberList" resultType="com.example.react.dto.MemberDTO">
		SELECT * FROM mvc_member_tbl
		 ORDER BY id DESC
	</select>
	
	<insert id="insertMember" parameterType="com.example.react.dto.MemberDTO">
		INSERT INTO MVC_MEMBER_TBL(id, password, username , age , email , address , salary)
 		values((SELECT NVL(MAX(id) + 1, 1) FROM mvc_member_tbl), #{password}, #{username}, #{age},#{email}, #{address},#{salary})
	</insert>
	
	<update id="updateMember" parameterType="com.example.react.dto.MemberDTO">
		UPDATE MVC_MEMBER_TBL
		   SET password = #{password}, username = #{username}, age = #{age}, 
		   	   email = #{email}, address = #{address}, salary = #{salary}
		 WHERE id = #{id}
	</update>
	
	<delete id="deleteMember" parameterType="int">
		DELETE MVC_MEMBER_TBL
		 WHERE id = #{id}
	</delete>
	
	<select id="findById" resultType="com.example.react.dto.MemberDTO" parameterType="int" >
		SELECT * FROM MVC_MEMBER_TBL
		 WHERE id = #{id}
	</select>

</mapper>


----------------------------------------------------------

10. 실행
   메인메서드클래스 우클릭 > Run As > Run On Server > Spring Boot App 선택 > 
  크롬창에서 localhost:8081/members 직접 실행

	POSTMAN으로 테스트 : GET/ localhost:8081/members
---------------------------------------------------------- 

11. 리액트 플젝 생성
visual studio code 실행

1) 오픈폴더 => 플젝경로 선택 (리액트가 해당 플젝안에 프론트단에 위치해야하므로)
D:\Dev126\workspace_spring\springboot_react_oracle>

2) 플젝생성 new Terminal > command prompt로 바꾸고 
- npx create-react-app front-react // 플젝생성, 플젝명은 소문자 
- cd front-react					// 경로 이동
- npm start							// 실행 : localhost:3000
      
      
11. 테이블과 serviceImpl의 jpa 메서드

-- scott126 작업
DROP TABLE MVC_member_TBL CASCADE CONSTRAINTS;
CREATE TABLE mvc_member_tbl (
	id number(10) PRIMARY KEY,
	password varchar2(15) NOT NULL, 
	username varchar2(15) NOT NULL,
	age NUMBER(3) DEFAULT 0 NOT NULL ,
	email varchar2(30) NOT NULL ,
	address varchar2(50) NOT NULL ,
	salary number(9) DEFAULT 0 NOT NULL 
)

INSERT INTO MVC_MEMBER_TBL(id, password, username , age , email , address , salary)
 values(1, '1234', '홍길동', 20,'hong1234@naver.com', '서울시 강남구', 100000);
INSERT INTO MVC_MEMBER_TBL(id, password, username , age , email , address , salary)
 values(2, '1234', '박나래', 25,'park1234@naver.com', '서울시 서초구', 200000);
INSERT INTO MVC_MEMBER_TBL(id, password, username , age , email , address , salary)
 values(3, '1234', '김태희', 34,'kim1234@naver.com', '서울시 금천구', 300000);
INSERT INTO MVC_MEMBER_TBL(id, password, username , age , email , address , salary)
 values(4, '1234', '김상순', 39,'kim@naver.com', '서울시 양천구', 400000);
INSERT INTO MVC_MEMBER_TBL(id, password, username , age , email , address , salary)
 values(5, '1234', '아이유', 31,'iu@naver.com', '서울시 구로구', 500000);
 
COMMIT;

SELECT * FROM MVC_member_TBL;

// 롬복

- 롬복 다운로드 : http://projectlombok.org/download => Download 1.18.26
- Specify location => 해당 이클립스 아이콘 더블클릭 > 대상경로 선택 D:\Dev126\Install\2. eclipse\eclipse-jee-2019-06-R-win32-x86_64\eclipse\eclipse.exe
	> Install/Update > Install successful > quit Installer

@Data 어노테이션을 활용하려면 @ToString, @EqualsAndHashCode, @Getter, 
					  @Setter, @RequiredArgsConstructor 를 자동완성
	 


